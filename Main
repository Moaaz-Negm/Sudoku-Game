import numpy as np

def load_labeled_sudoku():
    puzzle = np.array([
        [7, 2, 0, 0, 0, 1, 0, 0, 0],
        [8, 0, 0, 0, 0, 0, 0, 1, 9],
        [4, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 6, 9, 0, 0, 1, 0, 3],
        [0, 4, 0, 0, 0, 0, 9, 2, 0],
        [9, 0, 2, 1, 0, 8, 0, 7, 0],
        [2, 0, 0, 0, 0, 6, 0, 9, 0],
        [3, 9, 0, 0, 0, 7, 0, 0, 0],
        [6, 8, 0, 3, 0, 0, 5, 4, 1]
    ])

    solution = np.array([
        [7, 2, 3, 8, 9, 1, 6, 5, 4],
        [8, 6, 5, 2, 3, 4, 7, 1, 9],
        [4, 1, 9, 7, 6, 5, 8, 3, 2],
        [5, 7, 6, 9, 4, 2, 1, 8, 3],
        [1, 4, 8, 6, 7, 3, 9, 2, 5],
        [9, 3, 2, 1, 5, 8, 4, 7, 6],
        [2, 5, 1, 4, 8, 6, 3, 9, 7],
        [3, 9, 4, 5, 1, 7, 2, 6, 8],
        [6, 8, 7, 3, 2, 9, 5, 4, 1]
    ])
    
    return puzzle, solution

def display_board(board):
    print("    A B C   D E F   G H I")
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("   -------+-------+-------")
        row_display = f"{i+1} |"
        for j in range(9):
            value = board[i][j]
            cell = str(value) if value != 0 else "."
            row_display += f" {cell}"
            if (j + 1) % 3 == 0 and j != 8:
                row_display += " |"
        print(row_display)

def input_number(board, number, position):
    row, col = position
    if not (0 <= row < 9 and 0 <= col < 9):
        raise ValueError("Row and column must be between 0 and 8.")
    if not (1 <= number <= 9):
        raise ValueError("Number must be between 1 and 9.")
    
    board[row, col] = number
    return board

def main():
    puzzle, solution = load_labeled_sudoku()
    board = puzzle.copy()
    max_strikes = 5
    strikes = 0

    print("Welcome to Sudoku!\n")
    
    while True:
        display_board(board)
        print(f"\nStrikes: {strikes}/{max_strikes}")

        user_input = input("\nEnter your move (e.g., A1 5), or 'q' to quit: ").strip()
        if user_input.lower() == 'q':
            print("Thanks for playing!")
            break

        try:
            pos_str, num_str = user_input.upper().split()
            if len(pos_str) != 2:
                raise ValueError("Invalid position format.")

            col_letter = pos_str[0]
            row_num = pos_str[1]

            col = ord(col_letter) - ord('A')
            row = int(row_num) - 1
            number = int(num_str)

            if not (0 <= row < 9 and 0 <= col < 9):
                print("Invalid cell position.")
                continue

            if puzzle[row][col] != 0:
                print("You cannot change a pre-filled number.")
                continue

            board = input_number(board, number, (row, col))

            if board[row][col] != solution[row][col]:
                print("Incorrect!")
                strikes += 1
                board[row][col] = 0  # Remove incorrect guess

                if strikes >= max_strikes:
                    print("\nGame Over. You lost!")
                    print("Correct solution was:")
                    display_board(solution)
                    break
            else:
                print("Correct!")

            if np.array_equal(board, solution):
                print("\nCongratulations! You solved the puzzle!")
                break

        except Exception as e:
            print("Error:", e)
            print("Please enter input in format: A1 5")

if __name__ == "__main__":
    main()
